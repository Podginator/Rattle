/* Generated By:JJTree&JavaCC: Do not edit this line. RattleConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RattleConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int WRITE = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int AND = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int FN = 19;
  /** RegularExpression Id. */
  int CLASS = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int QUIT = 22;
  /** RegularExpression Id. */
  int CREATE = 23;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 24;
  /** RegularExpression Id. */
  int HEX_LITERAL = 25;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 26;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 27;
  /** RegularExpression Id. */
  int EXPONENT = 28;
  /** RegularExpression Id. */
  int STRING_LITERAL = 29;
  /** RegularExpression Id. */
  int IDENTIFIER = 30;
  /** RegularExpression Id. */
  int LETTER = 31;
  /** RegularExpression Id. */
  int DIGIT = 32;
  /** RegularExpression Id. */
  int LPAREN = 33;
  /** RegularExpression Id. */
  int RPAREN = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int LBRACKET = 37;
  /** RegularExpression Id. */
  int RBRACKET = 38;
  /** RegularExpression Id. */
  int SEMICOLON = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int PP = 42;
  /** RegularExpression Id. */
  int MM = 43;
  /** RegularExpression Id. */
  int ASSIGN = 44;
  /** RegularExpression Id. */
  int PEQ = 45;
  /** RegularExpression Id. */
  int MEQ = 46;
  /** RegularExpression Id. */
  int UEQ = 47;
  /** RegularExpression Id. */
  int EQ = 48;
  /** RegularExpression Id. */
  int OBJDEREF = 49;
  /** RegularExpression Id. */
  int GT = 50;
  /** RegularExpression Id. */
  int LT = 51;
  /** RegularExpression Id. */
  int LE = 52;
  /** RegularExpression Id. */
  int GE = 53;
  /** RegularExpression Id. */
  int NE = 54;
  /** RegularExpression Id. */
  int HOOK = 55;
  /** RegularExpression Id. */
  int COLON = 56;
  /** RegularExpression Id. */
  int PLUS = 57;
  /** RegularExpression Id. */
  int SUBT = 58;
  /** RegularExpression Id. */
  int STAR = 59;
  /** RegularExpression Id. */
  int SLASH = 60;
  /** RegularExpression Id. */
  int REM = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"IF\"",
    "\"ELSE\"",
    "\"FOR\"",
    "\"WHILE\"",
    "\"WRITE\"",
    "\"OR\"",
    "\"AND\"",
    "\"NOT\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"FN\"",
    "\"CLASS\"",
    "\"RETURN\"",
    "\"QUIT\"",
    "\"CREATE\"",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"@=\"",
    "\"==\"",
    "\"OBJ\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"extends \"",
    "\" where\"",
    "\"->\"",
    "\"<>\"",
  };

}
